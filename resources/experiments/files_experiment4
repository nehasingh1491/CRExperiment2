~~~~0L-MathUtility/src/main.py
    class MathUtility:
        def __init__(self):
            pass
        
        def is_prime(self, n):
            if n <= 1:
                return False
            for i in range(2, int(n ** 0.5) + 1):
                if n % i == 0:
                    return False
            return True
        
        def factorial(self, n):
            if n == 0 or n == 1:
                return 1
            else:
                return n * self.factorial(n - 1)
        
        def fibonacci(self, n):
            fib_sequence = [0, 1]
            for i in range(2, n):
                fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
            return fib_sequence
        
        def gcd(self, a, b):
            while b:
                a, b = b, a % b
            return a
    
        def lcm(self, a, b):
            return a * b // self.gcd(a, b)
        
        def is_palindrome(self, s):
            s = s.lower().replace(" ", "")
            return s == s[::-1]
        
        def power(self, base, exponent):
            return base ** exponent
~~~~

~~~~0R-MathUtility/src/main.py
    class MathUtility:
        def __init__(self):
            pass
        
        def is_prime(self, n):
            if n <= 1:
                return False
            for i in range(2, int(n ** 0.5) + 1):
                if n % i == 0:
                    return False
            return True
        
        def factorial(self, n):
            if n == 0 or n == 1:
                return 1
            else:
                return n * self.factorial(n - 1)
        
        def fibonacci(self, n):
            fib_sequence = [0, 1]
            for i in range(2, n):
                fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
            return fib_sequence
        
        def gcd(self, a, b):
            while b:
                a, b = b, a % b
            return a
    
        def lcm(self, a, b):
            return a * b // self.gcd(a, b)
        
        def is_palindrome(self, s):
            s = s.lower().replace(" ", "")
            return s == s[::-1]
        
        def power(self, base, exponent):
            return base ** exponent
            
        """
        Prime Factorization- Factors an int using native trial division

        Input:
            n: An int to factor
        Output:
            A list of the prime factors of n in sorted order with repetition
        Preconditions:
            n >= 1
        Example:
            >>> prime_factorization(12)
            [2, 2, 3]
            >>> prime_factorization(1)
            []
            >>> prime_factorization(101)
            [101]
        """
        def get_factors(self, n):
            for i in range(2, int(n ** 0.5) + 1):
                if n % i == 0:
                    return [i] + self.get_factors(n // i)
            return [n]
            
*****Alice-Add a check when n is 1-58-0-1-4-Bot
- for i in range(2, int(n ** 0.5) + 1):
+    if n == 1:
+        return None
+ for i in range(2, int(n ** 0.5) + 1):
*****
~~~~
